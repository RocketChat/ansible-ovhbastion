---
- name: gather group data
  getent:
    database: group

- name: ensure initial users exist on bastion
  become: no
  delegate_to: localhost
  command: "{{ bastion_ansible_ssh_command }} accountCreate --account {{ item.name }} --uid-auto --public-key {{ item.public_key }}"
  loop: "{{ bastion_initial_users }}"
  when: item.name not in getent_passwd.keys()
  tags:
    - bastion_users

- name: ensure initial groups exist on bastion
  become: no
  delegate_to: localhost
  command: "{{ bastion_ansible_ssh_command }} groupCreate --group {{ item.name }} --owner {{ item.owner }} --algo {{ item.algorithm | default('ed25519') }}"
  loop: "{{ bastion_initial_groups }}"
  # ovhbastion prefixes bastion groups with `key`
  when: "'key{{ item.name }}' not in getent_group.keys()"  # noqa 102
  tags:
    - bastion_users

- name: ensure users belong to expected groups
  become: no
  delegate_to: localhost
  command: "{{ bastion_ansible_ssh_command }} groupAddMember --account {{ item.0.name }} --group {{ item.1 }}"
  with_subelements:
    - "{{ bastion_initial_users }}"
    - groups
    - flags:
      skip_missing: true
  register: bastion_user_group
  changed_when: "'now has full access' in bastion_user_group.stdout"
  tags:
    - bastion_users

- name: ensure groups have host accesses installed (CIDRs)
  become: no
  delegate_to: localhost
  command: "{{ bastion_ansible_ssh_command }} groupAddServer \
            --group {{ item.0.name }} \
            --host {{ lookup('vars', item.1.host) }} \
            --user {{ item.0.name }} \
            --port {{ item.1.port | default(22) }} \
            --force"
  with_subelements:
    - "{{ bastion_initial_groups }}"
    - hosts_vars
    - flags:
      skip_missing: true
  register: bastion_cidr_host_group
  tags:
    - bastion_users
  changed_when: "'was added to group' in bastion_cidr_host_group.stdout"

- name: ensure groups have host accesses installed (statics)
  become: no
  delegate_to: localhost
  command: "{{ bastion_ansible_ssh_command }} groupAddServer \
            --group {{ item.0.name }} \
            --host {{ item.1.host }} \
            --user {{ item.0.name }} \
            --port {{ item.1.port | default(22) }} \
            --force"
  with_subelements:
    - "{{ bastion_initial_groups }}"
    - hosts
    - flags:
      skip_missing: true
  register: bastion_host_group
  tags:
    - bastion_users
  changed_when: "'was added to group' in bastion_host_group.stdout"

- name: save egress keys from users
  become: no
  delegate_to: localhost
  shell: |
    set -o pipefail
    {{ bastion_ansible_ssh_command }} accountListEgressKeys --account {{ item.name }} --quiet | grep '^from='
  args:
    executable: /bin/bash
  with_items: "{{ bastion_initial_users }}"
  register: bastion_users_ssh_keys
  tags:
    - bastion_users
  # TODO: we should detect when host access was first installed vs repeated
  # parsing a --json-greppable response might be helpful for this
  changed_when: False

- name: create placeholder host
  add_host:
    name: bastion_fact_placeholder
    # this one is complicated: iterate over the list of users, pair them with
    # their public key, and then turn the list of lists into a dict, with
    # username as key, and public key as value
    user_key_map: "{{ dict(bastion_initial_users | map(attribute='name') | zip(bastion_users_ssh_keys.results | map(attribute='stdout'))) }}"
